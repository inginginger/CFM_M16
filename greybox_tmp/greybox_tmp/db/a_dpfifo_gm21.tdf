--a_dpfifo ALLOW_RWCYCLE_WHEN_FULL="OFF" DEVICE_FAMILY="FLEX10KE" LPM_NUMWORDS=32 LPM_SHOWAHEAD="ON" lpm_width=12 lpm_widthu=5 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" clock data empty full q rreq sclr usedw wreq CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="FLEX10KE" LOW_POWER_MODE="AUTO" lpm_hint="MAXIMIZE_SPEED=7"
--VERSION_BEGIN 9.0SP1 cbx_altdpram 2008:05:19:10:27:12:SJ cbx_altsyncram 2009:04:02:11:34:15:SJ cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_fifo_common 2008:05:19:10:54:06:SJ cbx_lpm_add_sub 2008:12:09:22:11:50:SJ cbx_lpm_compare 2009:02:03:01:43:16:SJ cbx_lpm_counter 2008:05:19:10:42:20:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_lpm_mux 2009:03:31:01:01:28:SJ cbx_mgl 2009:02:26:16:06:21:SJ cbx_scfifo 2008:05:19:10:25:30:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ cbx_stratixiii 2008:12:24:11:49:14:SJ cbx_util_mgl 2008:11:21:14:58:47:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION a_fefifo_56f (aclr, clock, rreq, sclr, wreq)
RETURNS ( empty, full, usedw_out[4..0]);
FUNCTION altdpram (aclr, byteena[WIDTH_BYTEENA-1..0], data[WIDTH-1..0], inclock, inclocken, outclock, outclocken, rdaddress[WIDTHAD-1..0], rdaddressstall, rden, wraddress[WIDTHAD-1..0], wraddressstall, wren)
WITH ( BYTE_SIZE, INDATA_ACLR, INDATA_REG, LPM_FILE, lpm_hint, MAXIMUM_DEPTH, NUMWORDS, OUTDATA_ACLR, OUTDATA_REG, RAM_BLOCK_TYPE, RDADDRESS_ACLR, RDADDRESS_REG, RDCONTROL_ACLR, RDCONTROL_REG, READ_DURING_WRITE_MODE_MIXED_PORTS, USE_EAB, WIDTH, WIDTH_BYTEENA = 1, WIDTHAD, WRADDRESS_ACLR, WRADDRESS_REG, WRCONTROL_ACLR, WRCONTROL_REG)
RETURNS ( q[WIDTH-1..0]);
FUNCTION lpm_counter (aclr, aload, aset, cin, clk_en, clock, cnt_en, data[LPM_WIDTH-1..0], sclr, sload, sset, updown)
WITH ( lpm_avalue, lpm_direction, lpm_modulus, lpm_port_updown, lpm_pvalue, lpm_svalue, lpm_width)
RETURNS ( cout, eq[15..0], q[LPM_WIDTH-1..0]);

--synthesis_resources = altdpram 1 lpm_counter 3 lut 3 
SUBDESIGN a_dpfifo_gm21
( 
	clock	:	input;
	data[11..0]	:	input;
	empty	:	output;
	full	:	output;
	q[11..0]	:	output;
	rreq	:	input;
	sclr	:	input;
	usedw[4..0]	:	output;
	wreq	:	input;
) 
VARIABLE 
	fifo_state : a_fefifo_56f;
	FIFOram : altdpram
		WITH (
			lpm_hint = "MAXIMIZE_SPEED=7",
			RDCONTROL_ACLR = "OFF",
			RDCONTROL_REG = "UNREGISTERED",
			USE_EAB = "ON",
			WIDTH = 12,
			WIDTHAD = 5
		);
	rd_ptr_lsb : dffe;
	rd_ptr_msb : lpm_counter
		WITH (
			lpm_direction = "UP",
			lpm_port_updown = "PORT_UNUSED",
			lpm_width = 4
		);
	wr_ptr : lpm_counter
		WITH (
			lpm_direction = "UP",
			lpm_port_updown = "PORT_UNUSED",
			lpm_width = 5
		);
	aclr	: NODE;
	rd_ptr[4..0]	: WIRE;
	valid_rreq	: WIRE;
	valid_wreq	: WIRE;

BEGIN 
	fifo_state.aclr = aclr;
	fifo_state.clock = clock;
	fifo_state.rreq = rreq;
	fifo_state.sclr = sclr;
	fifo_state.wreq = wreq;
	FIFOram.data[] = data[];
	FIFOram.inclock = clock;
	FIFOram.outclock = clock;
	FIFOram.outclocken = (valid_rreq # sclr);
	FIFOram.rdaddress[] = ((! sclr) & rd_ptr[]);
	FIFOram.wraddress[] = wr_ptr.q[];
	FIFOram.wren = valid_wreq;
	rd_ptr_lsb.clk = clock;
	rd_ptr_lsb.clrn = (! aclr);
	rd_ptr_lsb.d = ((! rd_ptr_lsb.q) & (! sclr));
	rd_ptr_lsb.ena = (valid_rreq # sclr);
	rd_ptr_msb.aclr = aclr;
	rd_ptr_msb.clock = clock;
	rd_ptr_msb.cnt_en = (valid_rreq & (! rd_ptr_lsb.q));
	rd_ptr_msb.sclr = sclr;
	wr_ptr.aclr = aclr;
	wr_ptr.clock = clock;
	wr_ptr.cnt_en = valid_wreq;
	wr_ptr.sclr = sclr;
	aclr = GND;
	empty = fifo_state.empty;
	full = fifo_state.full;
	q[] = FIFOram.q[];
	rd_ptr[] = ( rd_ptr_msb.q[], (! rd_ptr_lsb.q));
	usedw[] = fifo_state.usedw_out[];
	valid_rreq = (rreq & (! fifo_state.empty));
	valid_wreq = (wreq & (! fifo_state.full));
END;
--VALID FILE
